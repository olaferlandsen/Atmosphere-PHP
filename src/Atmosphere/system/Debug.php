<?php
namespace Atmosphere
{
    class Debug
    {
        private static $logs        =   array();
        private static $lines       =   5;
        private static $level       =   0;
        private static $enabled     =   false;
        private static $format      =   'html';
        private static $engines     =   ['print_r', 'var_export'];
        private static $engine      =   'print_r';
        private static $formats     =   array("html", "text");
        private static $linkToJs    =   null;
        private static $linkToCss   =   null;
        private static $embed       =   true;
        private static $displayErrors = true;
        
        private static $print       =   true;
        private static $types       =   array(
            1       => "Fatal run-time error",
            2       => "Run-time warning",
            4       => "Compile-time parse error",
            8       => "Run-time notice",
            16      => "Fatal errors that occur during PHP's initial startup",
            32      => "Warnings (non-fatal errors) that occur during PHP's initial startup",
            64      => "Fatal compile-time error(generated by the Zend Scripting Engine)",
            128     => "Compile-time warning(generated by the Zend Scripting Engine)",
            256     => "User-generated error message",
            512     => "User-generated warning message",
            1024    => "User-generated warning message",
            2048    => "Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.",
            4096    => "Catchable fatal error",
            8192    => "Run-time notices",
            16384   => "User-generated warning message",
        );
        public static function log($message, $title = null, $code = false )
        {
            if (empty($title)) {
                $title = "Unknown";
            }
            if (self::$enabled === false) {
                return false;
            }
            
            if (!is_string($message)) {
                $key = "log.".md5(uniqid().microtime().".".$title);
            }else{
                $key = "log.".md5($message.".".$title);
            }
            
            if (array_key_exists($key , self::$logs)) {
                return false;
            }
            
            if (!is_string($message)) {
                if (empty($title) or strlen($title) < 1) {
                    $title = "Unknown ".gettype($message);
                }
                $_backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
                if (array_key_exists(self::$level, $_backtrace)) {
                    $backtrace = $_backtrace[self::$level];
                } else {
                    $backtrace = $_backtrace[0];
                }
                $code = preg_split("/\n/", \Debug::codeProcessor($message, \Debug::$engine));
                // Save error
                self::$logs[$key] = array(
                    //"title"     =>  "Debug: ".htmlentities($title, ENT_COMPAT, "UTF-8", true),
                    "file"      =>  $backtrace["file"],
                    "line"      =>  $backtrace["line"],
                    "message"   =>  null,
                    "type"      =>  "log",
                    "code"      =>  $code,
                    "original"  =>  $message,
                    "flag"      =>  false,
                    "backtrace" =>  $_backtrace
                );
                self::$logs[$key]["title"] = htmlentities($title, ENT_COMPAT, "UTF-8", true);
            } else {
                $_backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
                if (array_key_exists(self::$level, $_backtrace)) {
                    $backtrace = $_backtrace[self::$level];
                } else {
                    $backtrace = $_backtrace[0];
                }
                // Save error
                self::$logs[$key] = array(
                    "title"     =>  "Own Log: ".htmlentities($title, ENT_COMPAT, "UTF-8", true),
                    "file"      =>  $backtrace["file"],
                    "line"      =>  $backtrace["line"],
                    "message"   =>  htmlentities($message, ENT_COMPAT, "UTF-8", true),
                    "type"      =>  "log",
                    "code"      =>  self::pieceOfCode($backtrace["file"], $backtrace["line"] ),
                    "original"  =>  $message,
                    "flag"      =>  true,
                    "backtrace"=>$_backtrace
                );
            }
            return true;
        }
        public static function error($message, $title, $code = null)
        {
        }
        public static function info($message, $title, $code = null)
        {
        }
        public static function warn($message, $title, $code = null)
        {
        }
        public static function displayErrors ($displayErrors)
        {
            self::$displayErrors = (bool)$displayErrors;
        }
        public static function errorHandler($number, $message, $file, $line, $context)
        {
            // Set id for this error
            $key = "error.".md5($line.".".$file);
            if (array_key_exists($key , self::$logs)) {
                return false;
            }
            // Save error
            self::$logs[$key] = array(
                "title"     =>  "Error Handler:" . self::$types[$number],
                "file"      =>  $file,
                "line"      =>  $line,
                "message"   =>  $message,
                "type"      =>  $number,
                "code"      =>  self::pieceOfCode($file, $line),
                "flag"      =>  true,
                "backtrace" =>  debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)
            );
        }
        public static function exceptionHandler($exception)
        {
            if (self::$enabled === false) {
                return false;
            }
            // Set id for this error
            $key = "exception.".md5($exception->getLine().".".$exception->getFile());
            if (array_key_exists($key , self::$logs)) {
                return false;
            }
            // Save error
            self::$logs[$key] = array(
                "title"     =>  "Exception Handler",
                "file"      =>  $exception->getFile(),
                "line"      =>  $exception->getLine(),
                "message"   =>  $exception->getMessage(),
                "type"      =>  "exception",
                "code"      =>  self::pieceOfCode(
                    $exception->getFile(),
                    $exception->getLine()
                ),
                "flag"      =>  true,
                "backtrace" =>  debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)
            );
            return true;
        }
        public static function shutdownHandler()
        {
            if (self::$enabled === false) {
                return false;
            }
            $last = error_get_last();
            if (count($last) == 0) {
                return false;
            }
            // Set id for this error
            $key = "shutdown.".md5($last["line"].".".$last["file"]);
            if (array_key_exists($key , self::$logs)) {
                return false;
            }
            // Save error
            self::$logs[$key] = array(
                "title"     =>  "Shutdown Handler:".self::$types[$last["type"]],
                "file"      =>  $last["file"],
                "line"      =>  $last["line"],
                "message"   =>  $last["message"],
                "type"      =>  $last["type"],
                "code"      =>  self::pieceOfCode($last["file"], $last["line"]),
                "flag"      =>  true,
                "backtrace" =>  debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS)
            );
            return true;
        }
        public static function setLevel($level)
        {
            if (self::$enabled === false) {
                return false;
            }
            if (is_integer($level)) {
                self::$level = $level;
                return true;
            }
            return false;
        }
        public static function setLines ($lines)
        {
            if (self::$enabled === false) {
                return false;
            }
            if (is_integer($lines)) {
                self::$lines = abs($lines);
                return true;
            }
            return false;
        }
        public static function setFormat ($format)
        {
            if (self::$enabled === false) {
                return false;
            }
            if (!empty($format) and is_string($format)) {
                $format = strtolower($format);
                if (in_array($format, self::$formats)) {
                    self::$format = strtolower($format);
                    return true;
                }
            }
            return false;
        }
        public static function setLinkToCss($linkToCss)
        {
            if (self::$enabled === false) {
                return false;
            }
            if (!empty($linkToCss)) {
                self::$linkToCss = $linkToCss;
                return true;
            }
            return false;
        }
        public static function setLinkToJs($linkToJs)
        {
            if (self::$enabled === false) {
                return false;
            }
            if (!empty($linkToJs)) {
                self::$linkToJs = $linkToJs;
                return true;
            }
            return false;
        }
        public static function embedLinks($embed = true)
        {
            if ($embed === true) {
                self::$embed = true;
                return true;
            }
            self::$embed = false;
            return true;
        }
        public static function enable()
        {
            self::$enabled = true;
        }
        public static function disable()
        {
            self::$enabled = false;
        }
        public static function autoPrint($print = true)
        {
            self::$print = (boolean)$print;
        }
        public static function register()
        {
            if (function_exists ('class_alias')) {
                if (!class_exists('\Debug')) {
    			    class_alias( '\Atmosphere\Debug' , '\Debug' ) ;
    		    }
    		    if (!class_exists('Debug')) {
    			    class_alias( '\Atmosphere\Debug' , 'Debug' ) ;
    		    }
    		}
        }
        public static function fetch()
        {
            if (self::$enabled === false) {
                return false;
            }
            return self::$logs;
        }
        private static function pieceOfCode ($file, $line = false)
        {
            if (self::$enabled === false) {
                return false;
            }
            if (self::$lines < 0) {
                self::$lines;
            }
            $file = file($file, FILE_IGNORE_NEW_LINES);
            $file = array_slice (
                $file,
                max($line-self::$lines-1,0),
                self::$lines*2+1,
                true
            );
            return $file;
        }
        public static function display()
        {
            if (self::$enabled === false) {
                return false;
            }
            
            if (count(self::$logs) < 1) {
                return false;
            }
            if (self::$format == "html") {
                $html = "";
                $html .= '<div class="debug debug-overlay"></div>';
                $html .= '<div class="debug debug-container">';
                $index = 0;
                foreach (self::$logs AS $id => $element) {
                    $index++;
                    $itemId = "debugger_item_".uniqid();
                    $html .= '<div id="'.$itemId.'" class="debug debug-item debug-item-type-'.$element["type"].'">';
                        $html .= '<div class="debug debug-header">';
                            $html .= '<a style="cursor:pointer;" class="debug debug-close" onclick="debuggerRemoveItem(\''.$itemId.'\')">&times;</a>';
                            $html .= '<span class="debug-id">#'.$index.'</span> '.$element["title"] ;
                            
                            $html .= " <small><sup>DataType ";
                            if (is_array($element["original"])) {
                                $html .= "Array; Size=".count($element["original"]) ;
                            } elseif (is_object($element["original"]) and !is_null($element["original"])) {
                                if (is_object($element["original"]) && ($element["original"] instanceof Closure)) {
                                    $html .= "Closure Object";
                                } else {
                                    $html .= "Object; ".get_class($element["original"]);
                                }
                            } elseif (is_numeric($element["original"]) and (is_integer($element["original"]) or is_float($element["original"]))) {
                                if (is_integer($element["original"])) {
                                    $html .= "Integer";
                                } else {
                                    $html .="Float";
                                }
                            } elseif (is_string($element["original"])) {
                                $html .= "String";
                            } elseif (is_resource($element["original"])) {
                                $html .= "Resource";
                            } elseif (is_bool($element["original"])) {
                                $html .= "Boolean; value=".(($element["original"])?"True":"False");
                            } else {
                                $html .= ucfirst(gettype($element["original"]));
                            }
                            $html .= "</sup></small>";
                            
                        $html .= '</div>';
                        $html .= '<div class="debug debug-body">';
                            $html .= '<div class="debug debug-message">';
                                $html .= nl2br($element["message"]);
                            $html .= '</div>';
                            $html .= '<div class="debug debug-code">';
                            $uniqid = uniqid();
                            $html .= '<a style="cursor:pointer;" class="debug-toggle" onclick="debuggerToggleCode(\'pre-'. $uniqid .'\')">Show</a>';
                            $html .= '<pre id="pre-'. $uniqid.'">';
                                $html .= '<ol>';
                                foreach($element["code"] as $line => $code){
                                    if ($element["flag"] === true AND $line+1 == $element["line"]) {
                                        $html .= '<li class="flag" value="'.($line+1).'">';
                                    } else {
                                        $html .= '<li value="'.($line+1).'">';
                                    }
                                        $html .= '<code>';
                                            $html .= preg_replace(
                                                "/\s{1}/",
                                                "&nbsp;",
                                                htmlentities($code, ENT_COMPAT, "UTF-8", true)
                                            );
                                            $html .= '</code>';
                                    $html .= '</li>';
                                }
                                $html .= '</ol>';
                            $html .= '</pre>';
                            $html .= '</div>';
                        $html .= '</div>';
                        $html .= '<div class="debug debug-footer">';
                            $html .= '<span class="debug debug-file">'.$element["file"].'</span> on line <span class="debug debug-file">'.$element["line"].'</span>';
                        $html .= '</div>';
                        
                        $html .= highlight_string(print_r($element["backtrace"] ,true), true);
                    $html .= '</div>';
                }
                $html .= '</div>';
                if (!empty(self::$linkToJs)) {
                    if (self::$embed === true) {
                        $html .= '<script>';
                        $html .= @file_get_contents(self::$linkToJs);
                        $html .= '</script>';
                    } else {
                        $html .= '<script src="'.@file_get_contents(self::$linkToJs).'"></script>';
                    }
                }
                if (!empty(self::$linkToCss)) {
                    if (self::$embed === true) {
                        $html .= '<style>';
                        $html .= @file_get_contents(self::$linkToCss);
                        $html .= '</style>';
                    } else {
                        $html .= '<link rel="stylesheet" type="text/css" href="'.self::$linkToCss.'" />';
                    }
                }
                $output = $html;
            } else {
                $output = print_r(self::$logs, true);
            }
            flush();
            if (self::$print === true) {
                print($output);
                flush();
                return true;
            }
            return $output;
        }
        private static function codeProcessor ($code, $engine)
        {
            
            if ($engine == "print_r") {
                return print_r($code, true);
            } elseif ($engine == "var_export") {
                return var_export($code, true);
            }
            return $code;
        }
    }
}
